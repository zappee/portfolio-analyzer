package com.remal.portfolio.downloader.coinbasepro;

import lombok.extern.slf4j.Slf4j;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.util.Base64;
import java.util.Optional;

/**
 * Helper that builds Coinbase rest api calls and process the responses.
 * <p>
 * Copyright (c) 2020-2021 Remal Software and Arnold Somogyi All rights reserved
 * BSD (2-clause) licensed
 * </p>
 * @author arnold.somogyi@gmail.comm
 */
@Slf4j
public abstract class CoinbaseProRequestBuilder {

    /**
     * Coinbase Pro API url.
     */
    private static final String BASE_URL = "https://api.exchange.coinbase.com";

    /**
     * Coinbase Pro API key as a string.
     */
    protected final String publicKey;

    /**
     * Coinbase Pro passphrase.
     */
    protected final String passphrase;

    /**
     * Coinbase Pro secret for the API key.
     */
    protected final String secret;

    /**
     * Constructor.
     *
     * @param publicKey Coinbase Pro API key as a string
     * @param passphrase Coinbase Pro passphrase
     * @param secret Coinbase Pro secret for the API key
     */
    protected CoinbaseProRequestBuilder(String publicKey, String passphrase, String secret) {
        this.publicKey = publicKey;
        this.passphrase = passphrase;
        this.secret = secret;
    }

    /**
     * Converts the rest api response to JSONArray.
     *
     * @param endpoint rest api relative path
     * @return response as a JSONArray on an empty optional.
     * @throws IOException throws in case of error
     * @throws NoSuchAlgorithmException throws in case of error
     * @throws InvalidKeyException throws in case of error
     */
    protected Optional<JSONArray> getJsonArrayResponse(String endpoint)
            throws IOException, NoSuchAlgorithmException, InvalidKeyException {

        var connection = getConnection(endpoint);
        var responseCode = connection.getResponseCode();
        if (responseCode == 200) {
            var restResponse = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
            var jsonResponse = JSONValue.parse(restResponse);
            return Optional.of((JSONArray) jsonResponse);
        } else {
            String error = new String(connection.getErrorStream().readAllBytes());
            log.debug("Error while calling the '{}' endpoint. Response= {}: {}", endpoint, responseCode, error);
        }
        return Optional.empty();
    }

    /**
     * Initializes a HttpURLConnection with the headers that are necessary to call
     * the Coinbase API.
     *
     * @param path full url of the rest api
     * @return a complete HttpURLConnection that can be used to call the rest api
     * @throws IOException throws in case of error
     * @throws NoSuchAlgorithmException throws in case of error
     * @throws InvalidKeyException throws in case of error
     */
    private HttpURLConnection getConnection(String path)
            throws IOException, NoSuchAlgorithmException, InvalidKeyException {

        var timestamp = Instant.now().getEpochSecond() + "";
        var url = new URL(BASE_URL + path);

        log.debug("calling {}...", url);
        var connection = (HttpURLConnection) url.openConnection();
        connection.setRequestProperty("CB-ACCESS-KEY", publicKey);
        connection.setRequestProperty("CB-ACCESS-SIGN", signMessage(timestamp, path));
        connection.setRequestProperty("CB-ACCESS-TIMESTAMP", timestamp);
        connection.setRequestProperty("CB-ACCESS-PASSPHRASE", passphrase);
        connection.setRequestProperty("content-type", "application/json");
        connection.setConnectTimeout(5000);
        connection.setReadTimeout(5000);
        return connection;
    }

    /**
     * The CB-ACCESS-SIGN header value.
     * It is generated by creating a sha256 HMAC using the secret key on the
     * pre-hash string timestamp + method + requestPath + body (where '+'
     * represents string concatenation). The timestamp value is the same as the
     * CB-ACCESS-TIMESTAMP header.
     *
     * @param timestamp timestamp for the request in Epoch second
     * @param path full url of the rest api
     * @return message signature
     * @throws NoSuchAlgorithmException throws in case of error
     * @throws InvalidKeyException throws in case of error
     */
    private String signMessage(String timestamp, String path) throws NoSuchAlgorithmException, InvalidKeyException {
        var preHash = timestamp + "GET" + path;
        var hmacSha256 = Mac.getInstance("HmacSHA256");
        var secretDecoded = Base64.getDecoder().decode(secret);
        var secretKey = new SecretKeySpec(secretDecoded, "HmacSHA256");
        hmacSha256.init(secretKey);
        return Base64.getEncoder().encodeToString(hmacSha256.doFinal(preHash.getBytes()));
    }
}
